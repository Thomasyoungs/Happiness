package com.credit.happiness.utils;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.FilterInputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;public class Base64Decoder extends FilterInputStream {	private final char[] chars = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',			'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',			'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',			'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',			'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8',			'9', '+', '/' };	private final int[] ints = new int[128];	private int charCount;	private int carryOver;	private Base64Decoder(InputStream in) {		super(in);		for (int i = 0; i < 64; i++) {			ints[chars[i]] = i;		}	}	@Override	public int read() throws IOException {		int x;		do {			x = in.read();			if (x == -1) {				return -1;			}		} while (Character.isWhitespace((char) x));		charCount++;		if (x == '=') {			return -1;		}		x = ints[x];		int mode = (charCount - 1) % 4;		if (mode == 0) {			carryOver = x & 63;			return read();		} else if (mode == 1) {			int decoded = ((carryOver << 2) + (x >> 4)) & 255;			carryOver = x & 15;			return decoded;		} else if (mode == 2) {			int decoded = ((carryOver << 4) + (x >> 2)) & 255;			carryOver = x & 3;			return decoded;		} else if (mode == 3) {			int decoded = ((carryOver << 6) + x) & 255;			return decoded;		}		return -1;	}	@Override	public int read(byte[] buf, int off, int len) throws IOException {		if (buf.length < (len + off - 1)) {			throw new IOException("The input buffer is too small: " + len					+ " bytes requested starting at offset " + off					+ " while the buffer " + " is only " + buf.length					+ " bytes long.");		}		int i;		for (i = 0; i < len; i++) {			int x = read();			if (x == -1 && i == 0) {				return -1;			} else if (x == -1) {				break;			}			buf[off + i] = (byte) x;		}		return i;	}	public static String decode(String encoded, String codeType) {		return new String(decodeToBytes(encoded, codeType));	}	public static byte[] decodeToBytes(String decode, String codeType) {		byte[] bytes = null;		try {			bytes = decode.getBytes(codeType);		} catch (UnsupportedEncodingException ignored) {		}		Base64Decoder in = new Base64Decoder(new ByteArrayInputStream(bytes));		ByteArrayOutputStream out = new ByteArrayOutputStream(				(int) (bytes.length * 0.67));		try {			byte[] buf = new byte[4 * 1024];			int bytesRead;			while ((bytesRead = in.read(buf)) != -1) {				out.write(buf, 0, bytesRead);			}			return out.toByteArray();		} catch (IOException ignored) {			return null;		}finally{			//关闭流操作，防止内存泄露			try {				if(out != null) {					out.close();				}				if(in != null) {					in.close();				}			} catch (IOException e) {				e.printStackTrace();			}		}	}}